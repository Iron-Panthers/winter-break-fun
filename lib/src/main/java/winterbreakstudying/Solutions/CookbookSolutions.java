/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package winterbreakstudying.Solutions;

import java.util.ArrayList;

public class CookbookSolutions {

  // Create an arrayList of all the foods this cookbook contains

  private ArrayList<FoodSolutions> foods;

  // Create a zero arg constructor
  public CookbookSolutions() {

    ArrayList<FoodSolutions> foods = new ArrayList<FoodSolutions>();

    foods.add(new FoodSolutions());

    this.foods = foods;
  }

  public CookbookSolutions(ArrayList<FoodSolutions> foods) {
    this.foods = foods;
  }

  // Returns the arraylist of all the food
  public ArrayList<FoodSolutions> getFoods() {
    return this.foods;
  }

  // Iterate through the array and print all the food names
  public void printNamesOfAllDishes() {
    for (FoodSolutions food : foods) {
      System.out.println(food.getName());
    }
  }

  // Should find the highest rated dish and return it
  // If there are two dishes both most highly rated, then this method should return the first dish
  public FoodSolutions findHighestRatedDish() {
    // Stores the highest rating
    double highestRating = 0;

    // Stores the highest rated dish
    FoodSolutions highestRatedDish = new FoodSolutions();

    // Iterates through all the foods stored in the cookbook
    for (FoodSolutions food : foods) {
      // If there is a food with higher rating
      // It becomes the new highest rated dish
      if (food.getRating() > highestRating) {
        highestRating = food.getRating();
        highestRatedDish = food;
      }
    }

    return highestRatedDish;
  }

  /**
   * Deletes all dishes below a certain rating (keeps the dishes greater than or equal to the min
   * rating) You shouldn't be setting the foods arraylist to something - no food = arraylist and no
   * arraylist.add() To should be using the .delete() method! Hint: inside a for-loop, you can
   * actually modify the index by going i = num; or i--; or i++; or whatever it's not great
   * practice, but you should use it for this situation
   *
   * @param minRating - the minimum rating for the new cookbook
   */
  public void purgeCookbook(double minRating) {

    // Going through the arraylist
    for (int i = 0; i < foods.size(); i++) {
      // If the food has a rating less than the minimum arraylist, we remove it
      // However, because we deleted the entry in the arraylist, every next element has shifted back
      // by 1 to fill in the gap
      // Therefore, we have to shift our index back to not miss an element
      if (foods.get(i).getRating() < minRating) {
        foods.remove(i);
        i--;
      }
    }
  }
}
